#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <math.h>

#define SIZE 100

char stack[SIZE];
int top = -1;

// Function prototypes
void push(char);
char pop();
int precedence(char);
int isOperator(char);
void infixToPostfix(char infix[], char postfix[]);
int evaluatePostfix(char postfix[]);

void push(char item) {
    if (top >= SIZE - 1)
        printf("Stack Overflow\n");
    else
        stack[++top] = item;
}

char pop() {
    if (top < 0)
        return -1;
    else
        return stack[top--];
}

int precedence(char symbol) {
    switch (symbol) {
        case '^': return 3;
        case '*':
        case '/': return 2;
        case '+':
        case '-': return 1;
        default: return 0;
    }
}

int isOperator(char symbol) {
    return (symbol == '+' || symbol == '-' || symbol == '*' || symbol == '/' || symbol == '^');
}

void infixToPostfix(char infix[], char postfix[]) {
    char ch, x;
    int i = 0, k = 0;
    push('(');
    int len = 0;
    while (infix[len] != '\0') len++;
    infix[len] = ')';
    infix[len + 1] = '\0';

    while ((ch = infix[i++]) != '\0') {
        if (ch == '(')
            push(ch);
        else if (isalnum(ch))
            postfix[k++] = ch;
        else if (isOperator(ch)) {
            while (isOperator(stack[top]) && precedence(stack[top]) >= precedence(ch))
                postfix[k++] = pop();
            push(ch);
        } else if (ch == ')') {
            while ((x = pop()) != '(')
                postfix[k++] = x;
        }
    }
    postfix[k] = '\0';
}

int evaluatePostfix(char postfix[]) {
    int stack[SIZE];
    int top = -1;
    int i;
    char ch;
    for (i = 0; postfix[i] != '\0'; i++) {
        ch = postfix[i];
        if (isdigit(ch))
            stack[++top] = ch - '0';
        else if (isOperator(ch)) {
            int val2 = stack[top--];
            int val1 = stack[top--];
            switch (ch) {
                case '+': stack[++top] = val1 + val2; break;
                case '-': stack[++top] = val1 - val2; break;
                case '*': stack[++top] = val1 * val2; break;
                case '/': stack[++top] = val1 / val2; break;
                case '^': stack[++top] = pow(val1, val2); break;
            }
        }
    }
    return stack[top];
}

int main() {
    char infix[SIZE], postfix[SIZE];
    printf("Enter an infix expression: ");
    scanf("%s", infix);

    infixToPostfix(infix, postfix);
    printf("Postfix expression: %s\n", postfix);

    int result = evaluatePostfix(postfix);
    printf("Evaluation result: %d\n", result);

    return 0;
}

